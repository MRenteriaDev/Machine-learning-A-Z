setwd("C:/Users/mrent/source/repos/Machine-Learning-A-Z-master/ANN/R")
# Importar el dataset
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[,4:14]
View(dataset)
# Codificar la variables de clasificación como factor
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c("France","Spain","Germany"),
labels = c(1,2,3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c("Female","Male"),
labels = c(1,2)))
#Dividir el dataset en el conjunto de testing y de training
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split==TRUE)
testing_set = subset(dataset, split==FALSE)
# Se realiza el escalado de valores
training_set[,-11] = scale(training_set[,-11])
testing_set[,-11] = scale(testing_set[,-11])
# Crear la red neuronal
library(h2o)
# Crear la red neuronal
h2o.init(nthreads = -1)
# Crear la red neuronal
library(h2o)
h2o.init(nthreads = -1)
# Crear la red neuronal
library(h2o)
h2o.init(nthreads = -1)
# Crear la red neuronal
library(h2o)
h2o.init(nthreads = -1)
# Crear el modelo de clasificación
classifier = h2o.deeplearning(y = "Exited",
training_frame = as.h2o(training_set),
activation = "Reactifier",
hidden = c(6,6),
epochs = 100,
train_samples_per_iteration = -2)
# Crear el modelo de clasificación
classifier = h2o.deeplearning(y = "Exited",
training_frame = as.h2o(training_set),
activation = "Rectifier",
hidden = c(6,6),
epochs = 100,
train_samples_per_iteration = -2)
# Predicción de los resultados con el conjunto de testing
prob_pred = h2o.predict(classifier, newdata = testing_set[,-3])
# Predicción de los resultados con el conjunto de testing
prob_pred = h2o.predict(classifier, newdata = testing_set[,-11])
# Predicción de los resultados con el conjunto de testing
prob_pred = h2o.predict(classifier,
newdata = as.h2o(testing_set[,-11]))
y_pred= ifelse(prob_pred>0.5,1,0)
y_pred= ifelse(prob_pred>0.5)
# Predicción de los resultados con el conjunto de testing
prob_pred = h2o.predict(classifier,
newdata = as.h2o(testing_set[,-11]))
y_pred= ifelse(prob_pred > 0.5)
y_pred= (prob_pred > 0.5)
y_pred = as.vector(y_pred)
# Crear la matriz de confusión
cm = table(testing_set[,11], y_pred)
cm
1523+192
cm.summary()
cm.summary
summary(cm)
cls
cm
(1523+192)/2000
# Cerrar la sesión de H2o
h2o.shutdown()
setwd("C:/Users/mrent/source/repos/Machine-Learning-A-Z-master/ACP/R")
# importar el dataset
dataset = read.csv('Wine.csv')
View(dataset)
library(caTools)
set.seed(123)
split = sample.split(dataset$Customer_Segment, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
install.packages('caret')
# Proyección de los componentes principales
library(caret)
library(e1071)
pca = preProcess(x=training_set[,-14], method = "pca", pcaComp = 2)
trainig_set = predict(pca, trainig_set)
trainig_set = predict(pca, trainig_set)
# importar el dataset
dataset = read.csv('Wine.csv')
# Dividir el dataset en el conjunto de entrenamiento y en el conjunto de testing
library(caTools)
set.seed(123)
split = sample.split(dataset$Customer_Segment, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
#Escalado de las variables
training_set[,-14] = scale(training_set[,-14])
testing_set[,-14] = scale(testing_set[,-14])
# Proyección de los componentes principales
library(caret)
library(e1071)
pca = preProcess(x=training_set[,-14], method = "pca", pcaComp = 2)
trainig_set = predict(pca, trainig_set)
training_set = predict(pca, training_set)
View(training_set)
training_set = training_set[,c(2,3,1)]
View(training_set)
# Ajustar el modelo de regresión logística con el conjunto de entrenamiento
classifier = glm(formula = Customer_Segment ~ .,
data = training_set,
family = binomial)
# Ajustar el modelo de regresión logística con el conjunto de entrenamiento
classifier = svm(formula = Customer_Segment ~ .,
data = training_set,
type = "C-classification"
kernel = "linear")
# Ajustar el modelo de regresión logística con el conjunto de entrenamiento
classifier = svm(formula = Customer_Segment ~ .,
data = training_set,
type = "C-classification",
kernel = "linear")
View(classifier)
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-3])
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = training_set[,-3])
y_pred
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-3])
testing_set = testing_set[,c(2,3,1)]
# Ajustar el modelo de regresión logística con el conjunto de entrenamiento
classifier = svm(formula = Customer_Segment ~ .,
data = training_set,
type = "C-classification",
kernel = "linear")
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-3])
